num_classes: 80

in_channels: 3

# [depth, width, max_channels]
scale: [0.33, 0.25, 1024]

# [module, from, repeats, args]
# [Conv, from, N/A, [c_out, k, s]]
# [C2f, from, repeats, [c_out, shortcut]]
# [SPPF, from, N/A, [c_out, kernel_size]]
# [nn.Upsample, from, N/A, [None, scale_factor, mode]]
# [DetectionHead, from, N/A, [num_classes]]

backbone:
  - [Conv, -1, null, [64, 3, 2]]    # 0 (3,h,w) -> (16,h/2,w/2)
  - [Conv, -1, null, [128, 3, 2]]   # 1 (16,h/2,w/2) -> (32,h/4,w/4)
  - [C2f,  -1, 3, [128, True]]      # 2 (32,h/4,w/4) -> (32,h/4,w/4)
  - [Conv, -1, null, [256, 3, 2]]   # 3 (32,h/4,w/4) -> (64,h/8,w/8)
  - [C2f,  -1, 6, [256, True]]      # 4 (64,h/8,w/8) -> (64,h/8,w/8)
  - [Conv, -1, null, [512, 3, 2]]   # 5 (64,h/8,w/8) -> (128,h/16,w/16)
  - [C2f,  -1, 6, [512, True]]      # 6 (128,h/16,w/16) -> (128,h/16,w/16)
  - [Conv, -1, null, [1024, 3, 2]]  # 7 (128,h/16,w/16) -> (256,h/32,w/32)
  - [C2f,  -1, 3, [1024, False]]    # 8 (256,h/32,w/32) -> (256,h/32,w/32)
  - [SPPF, -1, null, [1024, 5]]     # 9 (256,h/32,w/32) -> (256,h/32,w/32)

head:
  - [nn.Upsample, -1, null, [null, 2, 'nearest']]  # 10 (256,h/32,w/32) -> (256,h/16,w/16)
  - [C2f, [-1, 6], 3, [512, False]]                # 11 (256+128,h/16,w/16) -> (128,h/16,w/16)

  # P3
  - [nn.Upsample, -1, null, [null, 2, 'nearest']]  # 12 (128,h/16,w/16) -> (128,h/8,w/8)
  - [C2f, [-1, 4], 3, [256, False]]                # 13 (128+64,h/8,w/8) -> (64,h/8,w/8)

  # P4
  - [Conv, -1, null, [256, 3, 2]]                  # 14 (64,h/8,w/8) -> (64,h/16,w/16)
  - [C2f, [-1, 11], 3, [512, False]]               # 15 (64+128,h/16,w/16) -> (128,h/16,w/16)

  # P5
  - [Conv, -1, null, [512, 3, 2]]                  # 16 (128,h/16,w/16) -> (128,h/32,w/32)
  - [C2f, [-1, 9], 3, [1024, False]]               # 17 (128+256,h/32,w/32) -> (256,h/32,w/32)

  - [DetectionHead, [13, 15, 17], null, [80]]      # 18 (h,w,c) -> (h,w,nc+4*reg_max)

loss_gains:
  cls: 0.5
  iou: 7.5
  dfl: 1.5